Token          Line #  Column #  Lexeme                                       
MP_PROGRAM     1       1         program
MP_IDENTIFIER  1       9         control
MP_SCOLON      1       16        ;
MP_VAR         2       5         var
MP_IDENTIFIER  2       9         a
MP_COMMA       2       10        ,
MP_IDENTIFIER  2       12        b
MP_COMMA       2       13        ,
MP_IDENTIFIER  2       15        c
MP_COLON       2       17        :
MP_INTEGER_LIT 2       19        integer
MP_SCOLON      2       26        ;
MP_IDENTIFIER  3       9         x
MP_COMMA       3       10        ,
MP_IDENTIFIER  3       12        y
MP_COMMA       3       13        ,
MP_IDENTIFIER  3       15        z
MP_COLON       3       17        :
MP_FLOAT_LIT   3       19        float
MP_SCOLON      3       24        ;
MP_IDENTIFIER  4       9         isIs
MP_COMMA       4       13        ,
MP_IDENTIFIER  4       15        hasHas
MP_COMMA       4       21        ,
MP_IDENTIFIER  4       23        lessThan
MP_COLON       4       32        :
MP_BOOLEAN     4       34        boolean
MP_SCOLON      4       41        ;
MP_IDENTIFIER  5       9         s
MP_COLON       5       11        :
MP_STRING      5       13        string
MP_SCOLON      5       19        ;
MP_BEGIN       6       1         begin
MP_IDENTIFIER  7       5         a
MP_ASSIGN      7       7         :=
MP_MINUS       7       10        -
MP_INTEGER_LIT 7       11        5
MP_SCOLON      7       12        ;
MP_IDENTIFIER  8       5         c
MP_ASSIGN      8       7         :=
MP_MINUS       8       10        -
MP_INTEGER_LIT 8       11        87
MP_SCOLON      8       13        ;
MP_IDENTIFIER  9       5         b
MP_ASSIGN      9       7         :=
MP_IDENTIFIER  9       10        a
MP_PLUS        9       12        +
MP_IDENTIFIER  9       14        c
MP_SCOLON      9       15        ;
MP_IF          10      2         if
MP_LPAREN      10      5         (
MP_IDENTIFIER  10      6         a
MP_LTHAN       10      8         <
MP_IDENTIFIER  10      10        b
MP_RPAREN      10      11        )
MP_THEN        10      13        then
MP_BEGIN       11      9         begin
MP_WRITE       12      13        Write
MP_LPAREN      12      18        (
MP_STRING      12      21        A is less than B\n
MP_RPAREN      12      39        )
MP_SCOLON      12      40        ;
MP_IDENTIFIER  13      13        lessThan
MP_ASSIGN      13      22        :=
MP_TRUE        13      25        true
MP_SCOLON      13      29        ;
MP_END         14      9         end
MP_ELSE        15      9         else
MP_BEGIN       16      9         begin
MP_WRITE       17      13        Write
MP_LPAREN      17      18        (
MP_STRING      17      21        A is greater than or equal to B\n
MP_RPAREN      17      54        )
MP_SCOLON      17      55        ;
MP_IDENTIFIER  18      13        lessThan
MP_ASSIGN      18      22        :=
MP_FALSE       18      25        false
MP_SCOLON      18      30        ;
MP_END         19      9         end
MP_SCOLON      19      12        ;
MP_IF          20      5         if
MP_LPAREN      20      8         (
MP_NOT         20      9         not
MP_IDENTIFIER  20      13        lessThan
MP_RPAREN      20      21        )
MP_THEN        20      23        then
MP_BEGIN       21      5         begin
MP_WRITE       22      9         Write
MP_LPAREN      22      14        (
MP_STRING      22      17        a: 
MP_COMMA       22      20        ,
MP_IDENTIFIER  22      22        a
MP_COMMA       22      23        ,
MP_STRING      22      27        ; < b: 
MP_COMMA       22      34        ,
MP_IDENTIFIER  22      36        b
MP_COMMA       22      37        ,
MP_STRING      22      41        \n
MP_RPAREN      22      43        )
MP_SCOLON      22      44        ;
MP_END         23      5         end
MP_SCOLON      23      8         ;
MP_FOR         24      5         for
MP_IDENTIFIER  24      9         a
MP_ASSIGN      24      11        :=
MP_IDENTIFIER  24      14        a
MP_TO          24      16        to
MP_INTEGER_LIT 24      19        10
MP_DO          24      22        do
MP_BEGIN       25      6         begin
MP_WRITELN     26      8         writeln
MP_LPAREN      26      15        (
MP_IDENTIFIER  26      16        a
MP_RPAREN      26      17        )
MP_SCOLON      26      18        ;
MP_END         27      6         end
MP_SCOLON      27      9         ;
MP_END         28      1         end
MP_PERIOD      28      4         .
MP_EOF         28      5         ÿ                                            

